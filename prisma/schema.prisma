generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sample {
  id                          String   @id @default(cuid())
  latitude                    Float?
  longitude                   Float?
  description                 String?
  createdAt                   DateTime @default(now())
  env_biome                   String
  env_feature                 String?
  physical_specimen_remaining Boolean
  qiita_study_id              Int
  sample_id                   String   @unique
  sample_id_full              String?
  sample_type                 String?
  top5_asv                    String[]
}

model Taxonomy {
  id         String  @id @default(uuid())
  asvSeq     String  @unique
  domain     String?
  phylum     String?
  class      String?
  order      String?
  family     String?
  genus      String?
  species    String?
  confidence Float?
}

model PolarMicrobe {
  id              String    @id @default(dbgenerated("gen_random_uuid()"))
  ncbi_id         String?
  organism        String?
  latitude        Float?
  longitude       Float?
  original_date   String?
  collection_date DateTime? @db.Timestamp(6)
  year            Int?
  sequence        String?
  createdAt       DateTime? @default(now()) @db.Timestamp(6)
}

model LocationInfo {
  id        Int     @id @default(autoincrement())
  location  String  @db.VarChar(10)
  city      String  @db.VarChar(50)
  latitude  Float
  longitude Float
  species   String  @db.VarChar(50)
  yield_g   Float?
  diversity Float?
  main_microbiome String?  @db.VarChar(255)
  contribution String?  @db.VarChar(255)


  @@index([location], name: "idx_location_info_location")
  @@index([species],  name: "idx_location_info_species")
}

model ProtectedTree {
  id                        Int       @id @default(autoincrement()) @map("id")
  provinceName              String    @map("province_name")
  districtName              String    @map("district_name")
  managingAgency            String?   @map("managing_agency")
  designationNumber         String?   @map("designation_number")
  protectionDesignationDate DateTime? @map("protection_designation_date")
  protectionRevocationDate  DateTime? @map("protection_revocation_date")
  protectionType            String?   @map("protection_type")
  familyName                String?   @map("family_name")
  scientificName            String?   @map("scientific_name")
  treeCategory              String?   @map("tree_category")
  treeCount                 Int?      @map("tree_count")
  treeAge                   Int?      @map("tree_age")
  treeHeight                Float?    @map("tree_height")
  breastHeightCircumference Float?    @map("breast_height_circumference")
  crownDiameter             Float?    @map("crown_diameter")
  grade                     String?   @map("grade")
  landUseCategory           String?   @map("land_use_category")
  roadNameAddress           String?   @map("road_name_address")  
  latitude             Float?    @map("wgs84_latitude")
  longitude            Float?    @map("wgs84_longitude")
  dataReferenceDate         DateTime? @map("data_reference_date")

  @@map("protected_tree")
}

enum SampleGroup {
  ASH
  BSD
  NSH
  NSD
}

model TreeSample {
  id                Int          @id @default(autoincrement())
  group             SampleGroup
  area              String
  latitude          Float
  longitude         Float
  declineSymptoms   Boolean
  replicates        String
  springSampling    DateTime
  summerSampling    DateTime
  compartments      String
  microorganisms    String

  @@map("tree_samples")
}